// Code generated by protoc-gen-go. DO NOT EDIT.
// source: srv.proto

package srv

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SrvRequest struct {
	MethodName           string   `protobuf:"bytes,1,opt,name=methodName,proto3" json:"methodName,omitempty"`
	Model                string   `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SrvRequest) Reset()         { *m = SrvRequest{} }
func (m *SrvRequest) String() string { return proto.CompactTextString(m) }
func (*SrvRequest) ProtoMessage()    {}
func (*SrvRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbe8325d22c1a26, []int{0}
}

func (m *SrvRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrvRequest.Unmarshal(m, b)
}
func (m *SrvRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrvRequest.Marshal(b, m, deterministic)
}
func (m *SrvRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrvRequest.Merge(m, src)
}
func (m *SrvRequest) XXX_Size() int {
	return xxx_messageInfo_SrvRequest.Size(m)
}
func (m *SrvRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SrvRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SrvRequest proto.InternalMessageInfo

func (m *SrvRequest) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *SrvRequest) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *SrvRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type SrvResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SrvResponse) Reset()         { *m = SrvResponse{} }
func (m *SrvResponse) String() string { return proto.CompactTextString(m) }
func (*SrvResponse) ProtoMessage()    {}
func (*SrvResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbe8325d22c1a26, []int{1}
}

func (m *SrvResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrvResponse.Unmarshal(m, b)
}
func (m *SrvResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrvResponse.Marshal(b, m, deterministic)
}
func (m *SrvResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrvResponse.Merge(m, src)
}
func (m *SrvResponse) XXX_Size() int {
	return xxx_messageInfo_SrvResponse.Size(m)
}
func (m *SrvResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SrvResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SrvResponse proto.InternalMessageInfo

func (m *SrvResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*SrvRequest)(nil), "SrvRequest")
	proto.RegisterType((*SrvResponse)(nil), "SrvResponse")
}

func init() { proto.RegisterFile("srv.proto", fileDescriptor_2bbe8325d22c1a26) }

var fileDescriptor_2bbe8325d22c1a26 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0x2a, 0xd3,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x8a, 0xe1, 0xe2, 0x0a, 0x2e, 0x2a, 0x0b, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe3, 0xe2, 0xca, 0x4d, 0x2d, 0xc9, 0xc8, 0x4f, 0xf1, 0x4b, 0xcc,
	0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x12, 0x11, 0x12, 0xe1, 0x62, 0xcd, 0xcd,
	0x4f, 0x49, 0xcd, 0x91, 0x60, 0x02, 0x4b, 0x41, 0x38, 0x42, 0x12, 0x5c, 0xec, 0x65, 0xa9, 0x45,
	0xc5, 0x99, 0xf9, 0x79, 0x12, 0xcc, 0x60, 0x71, 0x18, 0x57, 0x49, 0x95, 0x8b, 0x1b, 0x6c, 0x7a,
	0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x18, 0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x4e, 0x09,
	0xd4, 0x68, 0x28, 0xcf, 0xc8, 0x14, 0xec, 0x88, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21,
	0x75, 0x2e, 0x0e, 0xe7, 0xc4, 0x9c, 0x1c, 0xb7, 0xd2, 0xbc, 0x64, 0x21, 0x6e, 0x3d, 0x84, 0xeb,
	0xa4, 0x78, 0xf4, 0x90, 0x0c, 0x53, 0x62, 0x48, 0x62, 0x03, 0x7b, 0xc1, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xf3, 0x4e, 0xf2, 0x9f, 0xcf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SrvServiceClient is the client API for SrvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SrvServiceClient interface {
	CallFunc(ctx context.Context, in *SrvRequest, opts ...grpc.CallOption) (*SrvResponse, error)
}

type srvServiceClient struct {
	cc *grpc.ClientConn
}

func NewSrvServiceClient(cc *grpc.ClientConn) SrvServiceClient {
	return &srvServiceClient{cc}
}

func (c *srvServiceClient) CallFunc(ctx context.Context, in *SrvRequest, opts ...grpc.CallOption) (*SrvResponse, error) {
	out := new(SrvResponse)
	err := c.cc.Invoke(ctx, "/SrvService/CallFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvServiceServer is the server API for SrvService service.
type SrvServiceServer interface {
	CallFunc(context.Context, *SrvRequest) (*SrvResponse, error)
}

// UnimplementedSrvServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSrvServiceServer struct {
}

func (*UnimplementedSrvServiceServer) CallFunc(ctx context.Context, req *SrvRequest) (*SrvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallFunc not implemented")
}

func RegisterSrvServiceServer(s *grpc.Server, srv SrvServiceServer) {
	s.RegisterService(&_SrvService_serviceDesc, srv)
}

func _SrvService_CallFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvServiceServer).CallFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SrvService/CallFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvServiceServer).CallFunc(ctx, req.(*SrvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SrvService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SrvService",
	HandlerType: (*SrvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallFunc",
			Handler:    _SrvService_CallFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv.proto",
}
